{"version":3,"sources":["components/calculator/MortgageCalculator.jsx","App.js","serviceWorker.js","index.js"],"names":["MortgageCalculator","useState","amount","interest","years","frequency","term","userInputs","setUserInputs","monthlyPayment","totalPayment","totalInterest","isResult","noOfTermPayments","amortizationPeriodPayments","totalCostTerm","termPrincipal","termInterest","frequencyValue","calculatedResults","setCalculatedResults","error","setError","handleInputChange","event","target","name","value","calculateMortgage","userAmount","Number","calculatedInterest","calculatedPayments","compoundValue","Math","pow","monthlyAmount","noOfTermPaymentsResult","frequencyValueResult","paymentInterest","outstandingAmount","amortizationPeriodPaymentsResult","totalPrincipal","totalInterestTerm","totalPrincipalTerm","outstandingAmountTerm","i","interestAmount","principalAmount","interestAmountTerm","principalAmountTerm","isFinite","monthlyPaymentCalculated","toFixed","totalPaymentCalculated","totalInterestCalculated","totalCostTermResult","principalTerm","interestTerm","yearOptions","map","year","label","termOptions","className","autoComplete","onSubmit","e","preventDefault","errorMessage","inputErrorCheck","icon","faLaptopHouse","type","placeholder","onChange","required","disabled","selected","data","key","style","display","id","onClick","align","scope","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4c4a921f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLaptopHouse } from \"@fortawesome/free-solid-svg-icons\";\n\n\n// THIS MORTGAGE CALCULATION METHOD CALCULATES THE GIVEN USER INPUT AND RETURN THE MORTGAGE PAYMENT INFORMATION REQUESTED FOR A SPECIFIC TIME PERIOD\nfunction MortgageCalculator() {\n  // STATE THAT STORE USER INPUT VALUES\n  const [userInputs, setUserInputs] = useState({\n    amount: '',\n    interest: '',\n    years: '',\n    frequency: '',\n    term: ''\n  });\n\n  // STATE THAT STORES THE RESULT OF MORTGAGE CALCULATION\n  const [calculatedResults, setCalculatedResults] = useState({\n    monthlyPayment: '',\n    totalPayment: '',\n    totalInterest: '',\n    isResult: false,\n    noOfTermPayments: '',\n    amortizationPeriodPayments: '',\n    totalCostTerm: '',\n    termPrincipal: '',\n    termInterest: '',\n    frequencyValue: '',\n  });\n\n  // ARRAY TO HOLD THE OPTIONS FOR PAYMENT FREQUENCY\n  const payOptions = [\n    { value: 52, label: \"Accelerated Weekly\" },\n    { value: 52, label: \"Weekly\" },\n    { value: 26, label: \"Accelerated Bi-Weekly\" },\n    { value: 26, label: \"Bi-Weekly\" },\n    { value: 24, label: \"Semi-Monthly\" },\n    { value: 12, label: \"Monthly\" }\n  ]\n  // STATE TO STORE THE ERROR MESSAGES\n  const [error, setError] = useState('');\n\n  // UPDATE STATE VIA EVENT HANDLER FOR ALL USER INPUT VALUES\n  const handleInputChange = (event) =>\n    setUserInputs({ ...userInputs, [event.target.name]: event.target.value });\n\n  // ERROR MESSAGE VALIDATION\n  const inputErrorCheck = () => {\n    const { amount, interest, years } = userInputs;\n    let errorMessage = '';\n\n    // CHECK FOR POSITIVE INTEGERS\n    if (Number(amount) <= 0 || Number(interest) <= 0 || Number(years) <= 0) {\n      errorMessage = 'USER INPUTS MUST BE A POSITIVE INTEGER';\n    }\n    if (errorMessage) {\n      setError(errorMessage);\n      return false;\n    }\n    return true;\n  };\n\n  // DATA HANDLER THAT VALIDATES INPUTS AND PASS THEM AS A FUNCTION PARAMETER TO CALCULATE MORTGAGE\n  const handleSubmitValues = (e) => {\n    e.preventDefault();\n    if (inputErrorCheck()) {\n      calculateMortgage(userInputs);\n      setError('');\n    }\n  };\n\n  // METHOD CALL FOR FINAL MORTGAGE CALCULATION\n  const calculateMortgage = ({ amount, interest, years, frequency, term }) => {\n    const userAmount = Number(amount);\n    const calculatedInterest = Number(interest) / 100 / 12;\n    const calculatedPayments = Number(years) * 12;\n    const compoundValue = Math.pow(1 + calculatedInterest, calculatedPayments);\n    let monthlyAmount = (userAmount * compoundValue * calculatedInterest) / (compoundValue - 1);\n    let noOfTermPaymentsResult = term * 12;\n    let frequencyValueResult = 12;\n    let paymentInterest = calculatedInterest;\n\n    if (frequency == \"Weekly\") {\n      monthlyAmount = (monthlyAmount * 12) / 52;\n      noOfTermPaymentsResult = term * 52;\n      frequencyValueResult = 52;\n      paymentInterest = Number(interest) / 100 / 52;\n    }\n    if (frequency == \"Accelerated Weekly\") {\n      monthlyAmount = monthlyAmount / 4;\n      noOfTermPaymentsResult = term * 52;\n      frequencyValueResult = 52;\n      paymentInterest = Number(interest) / 100 / 52;\n    }\n    if (frequency == \"Bi-Weekly\") {\n      monthlyAmount = (monthlyAmount * 12) / 26;\n      noOfTermPaymentsResult = term * 26;\n      frequencyValueResult = 26;\n      paymentInterest = Number(interest) / 100 / 26;\n    }\n    if (frequency == \"Accelerated Bi-Weekly\") {\n      monthlyAmount = monthlyAmount / 2;\n      noOfTermPaymentsResult = term * 26;\n      frequencyValueResult = 26;\n      paymentInterest = Number(interest) / 100 / 26;\n    }\n    if (frequency == \"Semi-Monthly\") {\n      monthlyAmount = monthlyAmount / 2;\n      noOfTermPaymentsResult = term * 24;\n      frequencyValueResult = 24;\n      paymentInterest = Number(interest) / 100 / 24;\n    }\n    const amortizationPeriodPaymentsResult = years * frequencyValueResult;\n\n    // HERE THE LOGIC CALCULATES MORTGAGE WITH INTEREST AND PRINCIPAL FOR EACH GIVEN FREQUENCY\n    let totalInterest =0, totalPrincipal=0, totalInterestTerm=0, totalPrincipalTerm=0, totalCostAP=0, totalCostTerm=0;\n    let outstandingAmount, outstandingAmountTerm = userAmount;\n\n    // THIS FOR LOOP CALCULATES THE INDIVIDUAL MORTGAGE FOR AMORTIZATION PERIOD\n    for (let i = 0; i < amortizationPeriodPaymentsResult; i++) {\n      let interestAmount = paymentInterest * outstandingAmount\n      let principalAmount = monthlyAmount - interestAmount\n      outstandingAmount -= principalAmount\n\n      totalInterest = totalInterest + interestAmount\n      totalPrincipal = totalPrincipal + principalAmount\n      totalCostAP = totalInterest + totalPrincipal;\n    }\n\n    // THIS FOR LOOP CALCULATES THE INDIVIDUAL MORTGAGE FOR TERM PERIOD\n    for (let i = 0; i < noOfTermPaymentsResult; i++) {\n      let interestAmountTerm = paymentInterest * outstandingAmountTerm;\n      let principalAmountTerm = monthlyAmount - interestAmountTerm;\n      outstandingAmountTerm -= principalAmountTerm\n\n      totalInterestTerm += interestAmountTerm\n      totalPrincipalTerm += principalAmountTerm\n      totalCostTerm = totalInterestTerm + totalPrincipalTerm;\n\n    }\n\n    // DETERMINE WHETHER THE PASSED NUMBER IS FINITE\n    if (isFinite(monthlyAmount)) {\n      const monthlyPaymentCalculated = monthlyAmount.toFixed(2);\n      const totalPaymentCalculated = (monthlyAmount * amortizationPeriodPaymentsResult).toFixed(2);\n      const totalInterestCalculated = (monthlyAmount * amortizationPeriodPaymentsResult - userAmount).toFixed(2);\n      const totalCostTermResult = (totalCostTerm).toFixed(2);\n      const principalTerm = (totalPrincipalTerm).toFixed(2);\n      const interestTerm = (totalInterestTerm).toFixed(2);\n      \n\n      // STATE UPDATE OF CALCULATED RESULT FIELDS TO BE DISPLAYED TO THE USER\n      setCalculatedResults({\n        monthlyPayment: monthlyPaymentCalculated,\n        totalPayment: totalPaymentCalculated,\n        totalInterest: totalInterestCalculated,\n        isResult: true,\n        noOfTermPayments: noOfTermPaymentsResult,\n        amortizationPeriodPayments: amortizationPeriodPaymentsResult,\n        totalCostTerm: totalCostTermResult,\n        termPrincipal: principalTerm,\n        termInterest:interestTerm,\n        frequencyValue: frequencyValueResult\n      });\n    }\n    return;\n  }\n\n  // CLEAR THE USER INPUT FIELDS\n  const clearFields = () => {\n    setUserInputs({\n      amount: '',\n      interest: '',\n      years: '',\n      frequency: '',\n      term:''\n    });\n\n    setCalculatedResults({\n      monthlyPayment: '',\n      totalPayment: '',\n      totalInterest: '',\n      isResult: false,\n    });\n  };\n\n  // ARRAY FOR AMORTIZATION PERIOD OPTIONS\n  const yearOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30].map(year => {\n      return { value: year, label: year + \" \" + \"years\" };\n    })\n\n  // ARRAY FOR TERM OPTIONS\n  const termOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(term => {\n    return { value: term, label: term + \" \" + \"years\" }\n  })\n\n  // FINAL DOM RETURN WITH MORTGAGE SUMMARY AND CALCULATED SUMMARY REPORT\n  return (<>\n    <div className=\"deviceWrapper\">\n      <div className=\"formWrapper\">\n        <form autoComplete=\"off\" className=\"form\" onSubmit={handleSubmitValues}>\n          <div className=\"body\">\n            <FontAwesomeIcon icon={faLaptopHouse} />\n            <span> Mortgage Calculator System </span>\n          </div>\n\n          <div className=\"inWrapper\">\n            <div>\n              <label className=\"label\">Mortgage Amount:</label>\n              <input\n                type=\"number\"\n                name='amount'\n                placeholder=\"Enter Loan Amount\"\n                value={userInputs.amount}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n            <div>\n              <label className=\"label\">Loan Interest:</label>\n              <input\n                type=\"number\"\n                name='interest'\n                placeholder=\"Enter Interest\"\n                value={userInputs.interest}\n                onChange={handleInputChange}\n                required\n              />\n            </div>\n\n            <div>\n              <label className=\"label\">Amortization Period:</label>\n              <select required name=\"years\" value={userInputs.years} onChange={handleInputChange}>\n                <option value=\"\" disabled selected>Select years to repay</option>\n                {yearOptions.map(function (data, key) {\n                  return (\n                    <option key={key} value={data.value}>{data.label}</option>)\n                })}\n              </select>\n            </div>\n            <div >\n              <label className=\"label\">Payment Frequency:</label>\n              <select required name=\"frequency\" value={userInputs.frequency} onChange={handleInputChange}>\n                <option value=\"\" disabled selected>Select frequency</option>\n                {payOptions.map(function (data, key) {\n                  return (\n                    <option key={key} value={data.label}>{data.label}</option>)\n                })}\n              </select>\n            </div>\n            <div >\n              <label className=\"label\">Term:</label>\n              <select required name=\"term\" value={userInputs.term} onChange={handleInputChange}>\n                <option value=\"\" disabled selected>Select term</option>\n                {termOptions.map(function (data, key) {\n                  return (\n                    <option key={key} value={data.value}>{data.label}</option>)\n                })}\n              </select>\n            </div>\n            {error &&\n              <p className='error'>{error}</p>}\n          </div>\n          <div className=\"submitButton\">\n            <button className=\"button\" type=\"submit\">Calculate</button>\n          </div>\n\n          <div style={calculatedResults.noOfTermPayments ? { display: 'block' } : { display: 'none' }}>\n            <h2>Mortgage Summary</h2>\n            <div>\n              <p>Over the {userInputs.years}-year amortization period, you will:</p>\n              <ul>\n                <li>\n                  have made <strong>{calculatedResults.amortizationPeriodPayments}</strong> {userInputs.frequency} payments of <strong>${calculatedResults.monthlyPayment}</strong>.</li>\n                <li>\n                  have paid <strong>${userInputs.amount}</strong> in principal, <strong>${calculatedResults.totalInterest}</strong> in interest, for a total of <strong>${calculatedResults.totalPayment}</strong>.</li>\n              </ul>\n              <p>&nbsp;Over the {userInputs.term} term, you will:</p>\n              <ul>\n                <li>\n                  have made <strong>{calculatedResults.frequencyValue} </strong>{userInputs.frequency} payments of <strong>${calculatedResults.monthlyPayment}</strong>.</li>\n                <li>\n                  have paid <strong>${calculatedResults.termPrincipal}</strong> in principal, <strong>${calculatedResults.termInterest}</strong> in interest, for a total of <strong>${calculatedResults.totalCostTerm}</strong>.</li>\n              </ul>\n              <p>\n                &nbsp;At the end of your {userInputs.term} term, you will:\n               </p>\n              <ul>\n                <li>\n                  have a balance of <strong>${userInputs.amount - calculatedResults.termPrincipal}</strong>.</li>\n              </ul>\n            </div>\n          </div>\n\n          <div className='form-items'>\n            <div>\n              <label id='label'>Monthly Payment:</label>\n              <input type='text' value={calculatedResults.monthlyPayment} disabled />\n            </div>\n            <div>\n              <label id='label'>Total Cost: </label>\n              <input type='text' value={calculatedResults.totalPayment} disabled />\n            </div>\n            <div>\n              <label id='label'>Total Interest:</label>\n              <input type='text' value={calculatedResults.totalInterest} disabled />\n            </div>\n            <div className=\"submitButton\">\n              <button\n                className='button'\n                onClick={clearFields}\n              >Re-Calculate</button></div>\n          </div>\n          <div style={calculatedResults.noOfTermPayments ? { display: 'block' } : { display: 'none' }} >\n            <h2>Calculated Summary</h2>\n            <table className=\"table table-sm table-hover table-striped table-dark\">\n              <thead className=\"thead-dark\" align=\"center\">\n                <tr>\n                  <th scope=\"col\">Category</th>\n                  <th scope=\"col\">Term</th>\n                  <th scope=\"col\">Amortization Period</th></tr>\n              </thead>\n              <tbody>\n                <tr align=\"center\">\n                  <td>Number of Payments</td>\n                  <td>{calculatedResults.noOfTermPayments}</td>\n                  <td>{calculatedResults.amortizationPeriodPayments}</td>\n                </tr>\n                <tr align=\"center\">\n                  <td>Mortgage Payment</td>\n                  <td>{calculatedResults.monthlyPayment}</td>\n                  <td>{calculatedResults.monthlyPayment}</td>\n                </tr>\n                <tr align=\"center\">\n                  <td>Principal Payments</td>\n                  <td>{calculatedResults.termPrincipal}</td>\n                  <td>{userInputs.amount}</td>\n                </tr>\n                <tr align=\"center\">\n                  <td>Interest Payments</td>\n                  <td>{calculatedResults.termInterest}</td>\n                  <td>{calculatedResults.totalInterest}</td>\n                </tr>\n                <tr align=\"center\">\n                  <td>Total Cost</td>\n                  <td>{calculatedResults.totalCostTerm}</td>\n                  <td>{calculatedResults.totalPayment}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </form>\n      </div>\n    </div>\n  </>\n  );\n}\n\nexport default MortgageCalculator;","import React from 'react';\nimport MortgageCalculator from './components/calculator/MortgageCalculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <MortgageCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}